Wallet Infrastructure
Summary
Monad features excellent support for developers looking to refine their users' experience by utilizing modular wallet infrastructure.

These pages survey the supported infrastructure:

Embedded Wallets
Account Abstraction Providers
Smart Account Implementations
The landscape can be confusing, even to an experienced developer; therefore we include a rough topology below.

Background
Wallets allow users to store private keys and sign transactions. The basic setup involves separation between the wallet and the application: the application presents a transaction to the wallet for signing, and the wallet submits the transaction to the network, paying for inclusion and execution with native tokens deducted from its balance.

However, increasingly, developers wish to customize their users' experience, for example by sponsoring gas for their users or by allowing users to pay fees in an alternate currency. Other developers want to embed the "wallet" into the app and give the app signing power over that wallet, so that users don't have to sign a transaction with each action that they take. Modular wallet infrastructure enables these and other features.

A number of providers are solving for this experience. To simplify understanding of the options, we suggest the following two-dimensional matrix:

Freestanding	Embedded
EOA	See Simple Wallets	See Embedded Wallets.
Typically utilizes key sharding, e.g. using MPC, SSS, or TEE
Smart Account	Utilizes Account Abstraction, i.e. developer needs to choose:
AA Providers
Smart Accounts
See Embedded Wallets and look for "Embedded Smart Accounts"
EOA-based approach
(EOA, freestanding) is the traditional wallet experience powered by browser extension wallets, mobile wallets, and hardware wallets. It involves a single private key stored within the wallet. See Wallets for a survey.

(EOA, embedded): typically uses cryptographic techniques (MPC, SSS, etc) to shard the signing keys, implementing additional authorization or access control features off-chain, while presenting to the blockchain as an ordinary EOA. See Embedded Wallets for a list of providers.

Smart account (account abstraction) approach
Account Abstraction means using smart contracts in place of simple EOAs. The smart contract implements the authorization / access control logic, i.e. the logic is on chain.

Historically, smart contracts could not pay for their own transaction costs (although EIP-7702 introduces an exception to this rule). Therefore, the account abstraction path requires users to sign pseudo-transactions (UserOperations) and submit them to a custom mempool. Then, a service called the Bundler/Relayer submits UserOperations in a normal Monad transaction and pays for the execution.

Thus, there are at least two considerations for developers building with smart accounts:

the Bundler/Relayer service; see Account Abstraction Providers for a list
the Smart Account Implementation
Some embedded wallet providers support smart accounts. See Embedded Wallets and look out for "Embedded Smart Accounts".


Embedded Wallets
Background
Some developers want to "embed" a wallet into their application. Here are a few possible reasons they might want to do this:

to allow users to sign in with email or another social sign-in method
to allow users to take actions within the app without signing a new transaction each time.
Generally speaking, embedded wallet services provide this by utilizing advanced cryptographic techniques to shard keys. Some keys are stored user-side while others are stored on the application developer's server or the embedded wallet provider's server.

This page attempts a toplogy of authentication and key management features over the set of providers supporting Monad.

Authentication Features
Features	Description
Passkey sign-in	Authentication with WebAuthn (passkey)
Social sign-in	Authentication with social accounts (google, X, etc)
Email sign-in	Authentication with OTP via email
SMS sign-in	Authentication with OTP via SMS
Key Management Features
Features	Description
MPC	Multi-party computation
SSS	Shamir's Secret Sharing
TEE	Storage of private keys in a cloud-based Trusted Execution Environment, like AWS Nitro Enclaves
TSS	Threshold Signature Scheme
Embedded wallet	A wallet interface local to a website or mobile app, utilizing browser session keys for signing
Server-delegated actions	Allow app to request permission to sign on the user's behalf
Session keys	Scoped keys that grant access only for specific apps, useful for bots/AI agents
Provider Summary
These WaaS providers support the Monad Testnet:

Provider	Docs	TN	MN	Supported services	Security Method	How to get started
Alchemy	Docs	✅	⌛️	Embedded wallets
Auth: passkey, social, email sign-in		Quickstart
Dynamic	Docs	✅	❓	Embedded wallets
Auth: passkey, email/social/SMS sign-in	TEE; TSS-MPC (just added)	Get started
Metamask Delegation Toolkit	Docs	✅	⌛️	Embedded Smart Accounts
Auth: multisig, external EOA + passkey
Delegations for automating actions		Quickstart
Openfort	Docs	✅	❓	Embedded wallets, Backend wallets, Ecosystem wallets
Auth: passkeys, social, email	SSS	Quickstart
Para	Docs	✅	❓	Embedded wallets; robust policy engine for sessions
Auth: email, social, SMS sign-in	MPC + DKG	Quickstart
Phantom	Docs	✅	❓	Embedded wallets (Web SDK & Native Mobile SDK)
Auth: Google sign-in	SSS	Quickstart
Privy	Docs	✅	⌛️	Embedded wallets, server wallets, server-delegated actions
Auth: passkey, social, email, SMS	TEE + SSS	Quickstart
Reown (formerly WalletConnect)	Docs	✅	⌛️	Popular UI component for selecting a wallet
Embedded wallet with social/email sign-in		Quickstart
Sequence	Docs	✅	❓	Embedded wallets, ecosystem wallets
Auth: Passkey, Google, Apple, Twitter, email, Facebook, Twitch, Epic Games, Playfab, Stych, Standard OAuth	TEE; Sandboxed Smart Sessions	Ecosystem quickstart

Embedded quickstart
thirdweb	Docs	✅	❓	Embedded wallets
Auth: passkey, social, email, SMS, OIDC, or generic auth		Quickstart
Turnkey	Docs	✅	✅	Embedded wallet, policy engine, delegated access, signing automation, sessions
Server-side SDKs for auth, wallet management, and policies
Auth: passkey, social, email, SMS login	TEE	Quickstart
Web3Auth	Docs	✅	⌛️	Embedded wallet
Auth: passkey, social, email, SMS	MPC-SSS/TSS	Quickstart
TN = testnet, MN = mainnet; ✅ = supported, ⌛️ = in progress, ❓ = unknown, ❌ = won't support

Providers Offering Subsidized Usage
These WaaS providers are subsidizing usage on Monad Testnet:

Provider	How to access
Privy	Sign up, then email the Privy team at monad@privy.io
Para	Sign up via the Developer Portal and reach out to the team at ops@getpara.com
Turnkey	Turnkey is free for developers building on Monad Testnet. All you need to do is sign up!
Provider Details
Alchemy
Account Kit is a complete solution for account abstraction. Using Account Kit, you can create a smart contract wallet for every user that leverages account abstraction to simplify every step of your app's onboarding experience. It also offers Gas Manager and Bundler APIs for sponsoring gas and batching transactions.

To get started, sign up for an Alchemy account, visit the documentation, follow the quickstart guide or check out the demo here.

Alchemy helps you to replace 3rd-party pop-up wallets with native in-app auth. Drop in branded sign-in modals for email, passkeys, and social logins with plug-n-play components.

To get started, sign up for an Alchemy account, visit the documentation, follow the quickstart guide. To further streamline UX with no gas fees or signing for users, see Alchemy's AA infra offering and a demo here.

Dynamic
Dynamic offers smart and beautiful login flows for crypto-native users, simple onboarding flows for everyone else, and powerful developer tools that go beyond authentication.

To get started, visit the documentation or follow the quickstart guide.

MetaKeep
MetaKeep is the #1 self-custody infra for users & AI. Onboard 300x more users in 1 API call, 5 mins.

To get started, setup an onboarding call with the team.

Metamask Delegation Toolkit
The MetaMask Delegation Toolkit is a Viem-based collection of tools for integrating embedded smart contract wallets, known as MetaMask smart accounts, into dapps. Developers can create and manage MetaMask smart accounts that delegate specific permissions, such as spending limits or time-based access, to other accounts.

To get started, visit the documentation or follow the quickstart guide.

Para
info
Para is free for developers building on Monad Testnet!

Sign up via the Developer Portal and reach out to the team via the below email.

ops@getpara.com

Para is the easiest and most secure way to onboard all your users and support them throughout their crypto journey. We support projects throughout their growth, ranging from personal projects to many of the most trusted teams in crypto and beyond.

Para's cross-app embedded wallets work universally across apps, chains, and ecosystem, so whether users start transacting on EVM, Solana, or Cosmos, they can onboard once and transact forever, all with the same wallet.

To get started, visit the documentation or follow the quickstart guide.

Phantom
Phantom is the world's leading crypto wallet for managing digital assets and accessing decentralized applications.

Phantom embedded wallets enable seamless, seedless onboarding with in-app, non-custodial access--no app switching or seed phrases required.

To get started, visit the documentation or follow the quickstart guide.

Privy
info
Privy is subsidizing all Monad Testnet usage!

For more details reach out to the Privy team via the below email.

monad@privy.io

Privy helps you onboard any user to crypto no matter how familiar they are with the space. Power flexible, powerful wallets under the hood for any application, securely.

To get started, visit the documentation or follow the quickstart guide.

Reown
Reown gives developers the tools to build user experiences that make digital ownership effortless, intuitive, and secure.

AppKit
AppKit is a powerful, free, and fully open-source SDK for developers looking to integrate wallet connections and other Web3 functionalities into their apps on any EVM and non-EVM chain. In just a few simple steps, you can provide your users with seamless wallet access, one-click authentication, social logins, and notifications—streamlining their experience while enabling advanced features like on-ramp functionality, in-app token swaps and smart accounts.

To get started, visit the documentation or follow the quickstart guide.

Sequence
Sequence provides the industry gold standard in robust open-source, non-custodial Embedded and Ecosystem Wallets.Sequence is the originator of non-custodial smart contract wallets, and authors of ERC-1271 and ERC-6492.

Embedded and Ecosystem Wallets enable seamless onboarding with user-friendly email, social, passkey, and guest account logins. Invisible onchain transactions; secure and compliant non-custodial sovereignty; and cross-platform integrations with SDKs for Unity, Unreal, Web, and mobile. Fully customizable for developers and ecosystems.

To get started, visit the Ecosystem Wallet Quickstart.

thirdweb
thirdweb provides client-side SDKs for user onboarding, identity and transactions.

Onboard new users to your apps with every wallet & login method
create a complete picture of all your users via user analytics & identity linking
facilitate onchain transactions via onramps, swaps & bridging
To get started:

Sign up for a free thirdweb account
Visit Connect Documentation and Connect Playground
Turnkey
info
Turnkey is free for developers building on Monad Testnet!

Turnkey is secure, flexible, and scalable wallet infrastructure. Create millions of embedded wallets, eliminate manual transaction flows, and automate onchain actions - all without compromising on security.

To get started, visit the documentation or follow the quickstart guide.

Web3Auth
Web3Auth simplifies Web3 access with social logins, customisable wallet UI, and advanced security, with non custodial MPC wallet management.

To get started, visit the documentation or follow the quickstart guide.



Account Abstraction Providers
Account Abstraction Providers provide bundler and paymaster services, enabling features like sponsored transactions or payment via custom tokens.

Definitions
Service	Description
Bundler	Operates a custom mempool for UserOperations; simulates and assembles bundles of UserOperations
Paymaster	Enables sponsored transactions; enables users to pay for gas with a custom token
Provider Summary
Provider	Docs	TN	MN	Supported services	How to get started
Alchemy	Docs	✅	✅	Gas Manager (aka Paymaster)
Bundler	Dashboard
Biconomy	Docs	✅	❓	MEE	Getting started
FastLane	Docs	✅	❓	Paymaster and Bundler	Dashboard
Gelato Relay	Docs	✅	❓	Gelato Relay	Quickstart
Openfort	Docs	✅	❓	Paymaster and Bundler	Quickstart
Pimlico	Docs	✅	❓	Paymaster
Bundler	Tutorial
Sequence	Docs	✅	❓	Relayer: gasless, batched, parallelized transactions	Quickstart
thirdweb	Docs	✅	❓	Paymaster and Bundler	Quickstart
ZeroDev	Docs	✅	⌛️	Meta AA infrastructure for bundlers and paymasters	Dashboard
TN = testnet, MN = mainnet; ✅ = supported, ⌛️ = in progress, ❓ = unknown, ❌ = won't support

Provider Details
Alchemy
Alchemy powers the #1 most used smart accounts today with account abstraction that eliminates gas fees and signing for users. Their accounts support ERC-4337, EIP-7702, and ERC-6900, a modular account standard co-authored with the Ethereum Foundation, Circle, and Trust Wallet.

To get started, sign up for an Alchemy account, visit the documentation, follow the quickstart guide. To learn more, check out their smart wallets and demo here.

Biconomy
Biconomy is the most comprehensive smart account and execution infrastructure platform that enables seamless, user-friendly experiences across single or multiple chains. With Biconomy, developers can build superior onchain UX through gas abstraction, sessions, batching, and one-click signatures for complex actions on any number of networks.

To get started, visit the documentation.

FastLane
FastLane is an MEV protocol for validators + apps with an integrated 4337 bundler, an on-chain task scheduler, and the first holistic LST.

To get started, vist the shMonad Documentation or try the shMonad bundler using the following example project.

Gelato Relay
Gelato Relay allows you to sponsor gas cost on behalf of the user, enable gasless cross-chain transactions and Account Abstraction.

To get started, visit the documentation or follow the quickstart guide.

Openfort
Openfort is a developer platform that helps projects onboard and and activates wallets. It does so by creating wallets with it’s SSS and passkeys,sending transactions via sponsored paymasters and session keys or directly using backend wallets for automated onchain actions.

To get started, visit the documentation or follow the quickstart guide.

Pimlico
Pimlico is the world's most advanced ERC-4337 account abstraction infrastructure platform. Pimlico provides a suite of tools and services to help you build, deploy, and manage smart accounts on Ethereum and other EVM-compatible chains.

To get started, visit the documentation or follow the quickstart guide.

Sequence
The Sequence Transaction API is a unified relayer that dispatches transactions on EVM chains with:

Gas sponsorship
Fee abstraction
Batching
Parallel processing
It manages nonces, estimates optimal gas, and resubmits transactions when needed, so you can focus on your business logic. Sequence Builder offers a Gas Sponsorship feature that allows project owners to easily sponsor gas for their users in web3 apps. By covering transaction fees, users can enjoy a seamless experience without worrying about obtaining crypto for fees which is seamlessly integrated with our suite of smart contract wallets.

To get started, visit the gas sponsorship docs.

thirdweb
thirdweb offers a complete platform to leverage account abstraction.

Remove the clunky user experience of requiring gas & signatures for every onchain action:

Abstract away gas
Pre-audited account factory contracts
Built-in infra:
Sponsorship policies
To get started:

Sign up for a free thirdweb account
Visit Account Abstraction Documentation and Account Abstraction Playground
Zerodev
ZeroDev is the most powerful smart account development platform. With ZeroDev, you can build Web3 experiences without gas, confirmations, seed phrases, and bridging.

To get started, visit the documentation or follow the quickstart guide.



Smart Account Implementations
Background
Under ERC-4337, smart wallets perform authentication (signature verification) inside of a smart contract. Depending on the signature scheme, signing may be done locally (on the user's computer) or in a remote environment (e.g. TEEs).

This page lists notable smart account implementations deployed to Monad.

Provider Summary
These WaaS providers support the Monad Testnet:

Provider	Docs	TN	MN	Supported services	How to get started
Biconomy	Docs	✅	❓	Nexus: Smartest & most gas-efficient smart account
External Wallets
Auth: privy, turnkey; session keys	Quickstart
Pimlico	Docs	✅	❓	permissionless.js, a flexible SDK for interfacing with various smart accounts, bundlers/paymasters, and signers.	Tutorial
ZeroDev	Docs	✅	⌛️	Smart contract accounts
Session keys with several options for signature schemes (ECDSA, Passkey, Multisig), policies, and actions.	Quickstart
TN = testnet, MN = mainnet; ✅ = supported, ⌛️ = in progress, ❓ = unknown, ❌ = won't support

Provider Details
Biconomy
Biconomy is the most comprehensive smart account and execution infrastructure platform that enables seamless, user-friendly experiences across single or multiple chains. With Biconomy, developers can build superior onchain UX through gas abstraction, sessions, batching, and one-click signatures for complex actions on any number of networks.

To get started, visit the documentation.

Pimlico
Pimlico is the world's most advanced ERC-4337 account abstraction infrastructure platform. Pimlico provides a suite of tools and services to help you build, deploy, and manage smart accounts on Ethereum and other EVM-compatible chains.

To get started, visit the documentation or follow the quickstart guide.

Zerodev
ZeroDev is the most powerful smart account development platform. With ZeroDev, you can build Web3 experiences without gas, confirmations, seed phrases, and bridging.

To get started, visit the documentation or follow the quickstart guide.



